Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра Програмної інженерії



Звіт
З лабораторної роботи №2
з дисципліни «Скриптові мови програмування»









Виконав									Перевірив
ст.гр ПЗПІ-23-3 Чуваєв А.О.						ст. в. Сокорчук І.П.







Харків 2025
1. Хід роботи
1.1  Постановка задачі:
       
     Потрібно створити консольний застосунок «Продовольчий магазин "Весна"».
1.1.1 Вимоги до скрипта:
     ‒ Програма після запуску повинна вивести на термінал перелік можливих дій.
     ‒ Далі програма очікує введення значення з клавіатури. Якщо користувач вводить число, якого немає в списку можливих команд, необхідно вивести повідомлення про помилку і запропонувати користувачу ввести інше число.
     ‒ Щоб розпочати купувати товари, необхідно ввести число «1», після чого користувач повинен потрапити в режим закупівлі товарів.
На екрані має з’явитися перелік продуктів, де кожен рядок складається з номера, назви товару і його вартості, наприклад.
     ‒ Щоб купити товар, необхідно ввести його номер.
Після успішної перевірки на існування номера товару в списку, програма має попросити ввести кількість товару.
     ‒ Якщо номер товару і його кількість (менше 100 шт.) були вказані коректно, то товар додається в кошик. Якщо вказано кількість «0», то товар видаляється з кошика.
     ‒ Далі знову відображається перелік товарів і пропонується купити наступний товар. Якщо номер товару вказано неправильно, виводиться сповіщення про помилку, нову виводиться перелік товарів.
     ‒ Щоб завершити купувати товари і перейти до попереднього меню, необхідно ввести з клавіатури цифру «0». Щоб отримати підсумковий рахунок, потрібно ввести число «2». Рахунок має містити таку інформацію: №, назва, ціна товару, кількість товару, вартість товару.  У кінці чека має бути: РАЗОМ ДО CПЛАТИ: сума_за_всі_товари
     ‒ Щоб встановити свій профіль потрібно, ввести число «3», після чого програма попросить ввести ваше ім'я та ваш вік:
1.1.2 Обмеження скрипту
     ‒ обраний пункт меню існує;
     ‒ обраний товар існує;
     ‒ введена кількість товару більша нуля;
     ‒ імʼя користувача містить хоча б одну літеру;
     ‒ вік користувача становить від 7-ми до 150-ти років.
1.2  Написання скрипта
1.2.1 Створення файлу
     Почнімо написання алгоритму зі створення файлу на сервері, знову скористаймося командою touch. 
       touch pzpi-23-3-chuvaiev-artem-task3
	Після цього, одразу ж змінемо права доступу до файлу, скориставшись командою chmod:
       chmod 755 pzpi-23-3-chuvaiev-artem-task3
       chmod +x pzpi-23-3-chuvaiev-artem-task3
       
1.2.2 Основні класи.
     Для реалізації даного скрипту було використано 2 класи:
     ‒ Item – клас, що описує елементи, які можна буде придбати в магазині. Він має 3 поля: id, name, price та конструктор в якому їх задає.
     ‒ Program – основний клас, який має весь функціонал програми. Складається з таких полів: items, user_name, user_age. Ці поля потрібні для того, щоб ми змогли зберігати інформацію про покупки користувача, та його профіль.
А також з одного конструктору та таких методів:
	Конструктор: в ньому проходить ініціалізація, а саме проходить зчитування json – файлу, з усіма продуктами, що будуть доступні користувачам.[1] 
	Ми зчитуємо файли в дочірній директорії, після чого за допомогою циклу створюємо об’єкти класу Item, і додаємо їх до поля items. Код конструктору:
       24:     public function __construct()
       25:     {
       26:         $jsonData = file_get_contents('task3-items.json');
       27:         $data = json_decode($jsonData, true);
       28: 
       29:         foreach ($data['Items'] as $id => $itemData) {
       30:             $this->items[] = new Item($id, $itemData['name'], $itemData['price']);
       31:         }
       32:     }
       
     Функція printMenu – відповідає за друк головного меню програми, її робимо приватною, щоб енкапсулювати логіку, яка не має виходити за межі класу:
       34:     private function printMenu(): void
       35:     {
       36:         echo ("################################\n");
       37:         echo ("# ПРОДОВОЛЬЧИЙ МАГАЗИН \"ВЕСНА\" #\n");
       38:         echo ("################################\n");
       39:         echo ("1 Вибрати товари\n");
       40:         echo ("2 Отримати підсумковий рахунок\n");
       41:         echo ("3 Налаштувати свій профіль\n");
       42:         echo ("0 Вийти з програми\n");
       43:     }
       
     Допоміжні функції getStringLength та getLongestString, що будуть застосовані для вирівнювання даних за шириною. Функція getStringLength, за допомогою preg_split та параметру ‘//u’ буде працювати з переданою строкою як з юнікод строкою, де символами займають два байти для підтримки української мови, так як звичайний strlen порівнює аргументи побайтово, а mbstrlen недоступний на VPS веб сервері.
       45:     private function getStringLength($str)
       46:     {
       47:         $chars = preg_split('//u', $str, -1, PREG_SPLIT_NO_EMPTY);
       48:         return count($chars);
       49:     }
       
     В свою чергу функція getLongestString буде повертати найдовшу строку, щоб потім робити вирівнювання елементів за їх шириною.
       51:     private function getLongestString(array $items): int
       52:     {
       53:         $longest = 0;
       54:         foreach ($items as $value) {
       55:             $currlen = $this->getStringLength($value->name);
       56:             if ($longest < $currlen) { 
       57:                 $longest = $currlen;
       58:             }
       59:         }
       60:         return $longest;
       61:     }
       
     Функція printItems, використовується для того, щоб відображати всі елементи нашого магазину з їх цінами, щоб користувач зміг сформувати список покупок. Також в цій функції виконується вирівнювання елементів за назвою. Для цього було використано допоміжні функції згадані вище, і щоб коректно вирівняти елементи за шириною, варто лише додати таку кількість пробілів, як (довжина найдовшого елементу – довжина і-го елементу).
       63:     private function printItems(): void
       64:     {
       65:         $longest = $this->getLongestString($this->items);
       66:         echo "№  НАЗВА" . str_repeat(" ", $longest - 5) . "  ";
       67:         echo "ЦІНА\n";
       68:         for ($i = 0; $i < count($this->items); $i += 1) {
       69:             echo $this->items[$i]->id . "  ";
       70:             echo $this->items[$i]->name . str_repeat(" ", $longest - $this->getStringLength($this->items[$i]->name)). "  ";
       71:             echo $this->items[$i]->price . "\n";
       72:         }
       73:         echo ("-----------------\n");
       74:         echo ("0  ПОВЕРНУТИСЯ\n");
       75:     }
       
     Функція displayCart, вона приймає як аргумент масив елементів для їх відображення. В цій функції буде відображення корзини користувача, в якій буде назва елементів та їх кількість, як вказано в постановці задачі.
       77:     private function displayCart(array $cart): void
       78:     {
       79:         $longest = $this->getLongestString($this->items);
       80:         echo ("У КОШИКУ:\n");
       81:         echo "НАЗВА" . str_repeat(" ", $longest - 5) . "  ";
       82:         echo("КІЛЬКІСТЬ\n");
       83:         for ($i = 0; $i < count($this->items); $i++) {
       84:             if ($cart[$i] > 0) {
       85:                 echo $this->items[$i]->name . str_repeat(" ", $longest - $this->getStringLength($this->items[$i]->name)) . "  ";
       86:                 echo $cart[$i] . "\n";
       87:                 echo "\n";
       88:             }
       89:         }
       90:     }
       
     І остання функція – головна функція програми. В ній на початку ми ініціалізуємо корзину 0, тобто і-ий елемент корзини буде відповідати і-му елементу продукту, що користувач зможе придбати. Далі починається основний цикл програми, в якому ми друкуємо головне меню програми і  який має в собі блок switch, що буде задавати, який блок програми матиме виконуватись. Згідно з постановкою задачі має бути 4 основні дії, а також обробка помилок.
     В першому блоці буде обробка додавання товару в корзину. Спочатку йде виклик функції друкування елементів, після чого за допомогою команди readline ми зчитуємо ввід користувача. В більшості дій надалі, при натисканні нуля буде дія відміни і тут так само. Якщо ж користувач натиснув якийсь коректний номер і такий елемент є в системі, то тоді користувачу буде запропоновано ввести кількість елементів, де кількість має бути більше за 0 і менше за 100. А також звернувшись до постановки задачі, ми можемо зробити висновок, що при натисканні на нуль на етапі введення кількості, програма має видаляти відповідний продукт з корзини. І також якщо все-ж-таки користувач захоче видалити, то потім потрібно показати користувачу чи його кошик пустий, вивівши відповідне повідомлення. А якщо кількість не дорівнює 0, то тоді потрібно присвоїти цю кількість відповідному елементу і вивести корзину користувачу.
       101:                 case 1:
       102:                     while (1) {
       103:                         $this->printItems();
       104:                         $selectedItem = readline("Виберіть товар: ");
       105:                         if ($selectedItem == 0) {
       106:                             break;
       107:                         }
       108: 
       109:                         if ($selectedItem < 0 || $selectedItem > count($this->items)) {
       110:                             echo ("ПОМИЛКА! ВКАЗАНО НЕПРАВИЛЬНИЙ НОМЕР ТОВАРУ\n");
       111:                             continue;
       112:                         }
       113:                         $selectedAmount = readline("Введіть кількість, штук: ");
       114:                         if ($selectedAmount < 0 || $selectedAmount > 100) {
       115:                             echo ("ПОМИЛКА! Невірна кількість\n");
       116:                             continue;
       117:                         }
       118:                         if ($selectedAmount == 0) {
       119:                             if ($cart[$selectedItem - 1] > 0) {
       120:                                 echo ("ВИДАЛЯЮ З КОШИКА\n");
       121:                                 $cart[$selectedItem - 1] = 0;
       122:                             }
       123: 
       124:                             $isEmpty = true;
       125:                             foreach ($cart as $value) {
       126:                                 if ($value > 0) {
       127:                                     $isEmpty = false;
       128:                                     break;
       129:                                 }
       130:                             }
       131:                             if ($isEmpty) {
       132:                                 echo ("КОШИК ПОРОЖНІЙ\n");
       133:                             }
       134:                         } else {
       135:                             $cart[$selectedItem - 1] = $selectedAmount;
       136:                             $this->displayCart($cart);
       137:                         }
       138:                     }
       139:                     break;
       
     В другому блоці потрібно обробити вивести корзину користувача. Має міститись така інформація: порядковий_номер, назва, ціна, кількість, ціна за кількість, а також повна ціна корзини у кінці. Для цього ми знову будемо вирівнювати за шириною, а для розрахунку кількостей будемо користуватись простим множенням ціни на кількість елементів і загальною сумою у кінці циклу.
       140:                 case 2:
       141:                     $total = 0;
       142:                     $longest = $this->getLongestString($this->items);
       143:                     echo "№  НАЗВА" . str_repeat(" ", $longest - 5) . "  ";
       144:                     echo "ЦІНА  КІЛЬКІСТЬ  ВАРТІСТЬ\n";
       145:                     $num = 1;
       146:                     for ($i = 0; $i < count($this->items); $i++) {
       147:                         if ($cart[$i] > 0) {
       148:                             $cost = $cart[$i] * $this->items[$i]->price;
       149:                             echo $num . "  ";
       150:                             echo $this->items[$i]->name . str_repeat(" ", $longest - $this->getStringLength($this->items[$i]->name)) . "  ";
       151:                             echo $this->items[$i]->price . str_repeat(" ", 4 - $this->getStringLength($this->items[$i]->price)) . "  ";
       152:                             echo $cart[$i] . str_repeat(" ", 9 - $this->getStringLength($cart[$i])) . "  ";
       153:                             echo $cost . "\n";
       154:                             $total += $cost;
       155: 
       156:                             $num++;
       157:                         }
       158:                     }
       159:                     echo ("РАЗОМ ДО CПЛАТИ: $total\n");
       160:                     echo "\n";
       161:                     break; 
       
     В третьому блоці потрібно обробити профіль користувача. Для цього виконується два цикли, в яких користувач буде вводити дані, допоки вони не пройдуть валідацію, а саме: ім’я повинно мати як мінімум 1 букву, і бути довшим за 0 символів, а вік має бути в діапазоні від 7 до 150. Для перевірки першої умови скористаємось регулярним виразом '/\p{L}/u', де \p{L} це символ з будь-якої категорії Letter, а /u показує, що рядок інтерпретується як Unicode.
       162:                 case 3:
       163:                     while (true) {
       164:                         $name = readline("Ваше імʼя: ");
       165:                         if (!preg_match('/\p{L}/u', $name)) {
       166:                             echo ("Імʼя користувача не може бути порожнім і повинно містити хоча б одну літеру.\n");
       167:                             continue;
       168:                         }
       169:                         $this->user_name = $name;
       170:                         break;
       171:                     }
       172: 
       173:                     while (true) {
       174:                         $age = readline("Ваш вік: ");
       175:                         if ($age < 7 || $age > 150) {
       176:                             echo ("Користувач не може бути молодшим 7-ми або старшим 150-ти років\n");
       177:                             continue;
       178:                         }
       179:                         $this->user_age = $age;
       180:                         break;
       181:                     }
       182:                     echo ("Профіль встановлено: {$this->user_name}, {$this->user_age} років\n");
       183:                     echo "\n";
       184:                     break;
       
     А також випадок 0 буде закривати програму, а якщо будь-який інший, то тоді цикл вибору буде йти поки користувач не вибере правильний номер.
       185:                 case 0:
       186:                     echo ("До побачення!\n");
       187:                     return 0;
       188:                 default:
       189:                     echo ("ПОМИЛКА! Введіть правильну команду\n");
       
1.3  Тестування програми
1.3.1 Головне меню
При запуску файлу відображається ось таке головне меню:
       pzpi-23-3-chuvaiev-artem@vps52766:~$ ./pzpi-23-3-chuvaiev-artem-task3.php
       
       ################################
       # ПРОДОВОЛЬЧИЙ МАГАЗИН "ВЕСНА" #
       ################################
       1 Вибрати товари
       2 Отримати підсумковий рахунок
       3 Налаштувати свій профіль
       0 Вийти з програми
       Введіть команду:
       
1.3.2 Відображення списку товарів
При натисканні на 1, відображається список та його вибір
       Введіть команду: 1
       №  НАЗВА                 ЦІНА
       1  Молоко пастеризоване  12
       2  Хліб чорний           9
       3  Сир білий             21
       4  Сметана 20%           25
       5  Кефір 1%              19
       6  Вода газована         18
       7  Печиво "Весна"        14
       -----------------
       0  ПОВЕРНУТИСЯ
       Виберіть товар:
       
     Далі при коректному виборі додається елемент до списку з відповідною кількістю.
       Виберіть товар: 1
       Введіть кількість, штук: 3
       У КОШИКУ:
       НАЗВА                 КІЛЬКІСТЬ
       Молоко пастеризоване  3
       
     Якщо ж вибрати кількість елементів 0, і в кошику буде порожньо, то тоді надрукується відповідне повідомлення.
       Виберіть товар: 1
       Введіть кількість, штук: 0
       ВИДАЛЯЮ З КОШИКА
       КОШИК ПОРОЖНІЙ
       
1.3.3 Відображення кошику.
     Далі додамо декілька елементів і протестуємо вивід кошику.
       Введіть команду: 2
       №  НАЗВА                 ЦІНА  КІЛЬКІСТЬ  ВАРТІСТЬ
       1  Молоко пастеризоване  12    2          24
       2  Сметана 20%           25    3          75
       РАЗОМ ДО CПЛАТИ: 99
       
1.3.4 Відображення профілю
     Відредагуємо профіль користувача натиснувши на 3 і введемо валідні дані.
       Введіть команду: 3
       Ваше імʼя: Артем
       Ваш вік: 18
       Профіль встановлено: Артем, 18 років
     А тепер протестуємо з невалідними даними
       Введіть команду: 3
       Ваше імʼя: 0
       Імʼя користувача не може бути порожнім і повинно містити хоча б одну літеру.
       Ваше імʼя: -1
       Імʼя користувача не може бути порожнім і повинно містити хоча б одну літеру.
       Ваше імʼя: +
       Імʼя користувача не може бути порожнім і повинно містити хоча б одну літеру.
       Ваше імʼя: а
       Ваш вік: -1
       Користувач не може бути молодшим 7-ми або старшим 150-ти років
       Ваш вік: 151
       Користувач не може бути молодшим 7-ми або старшим 150-ти років
       Ваш вік: 23
       Профіль встановлено: а, 23 років
       
     Отже, програма виконується згідно з усіма вимогами поставленими в розділі постановка задачі.
     
     
     Висновок
     Під час виконання лабораторної роботи №2 було створено консольний застосунок на мові PHP під назвою «Продовольчий магазин "Весна"». Програма успішно реалізовує базову функціональність віртуального магазину. Після запуску користувач бачить меню з можливими діями, серед яких є вибір товарів, перегляд підсумкового рахунку, налаштування профілю, а також вихід із програми. Програма також включає перевірку правильності введеної інформації на всіх етапах взаємодії з користувачем. Робота над завданням дозволила закріпити практичні навички роботи з введенням і обробкою даних у PHP, реалізації логіки меню та взаємодії з користувачем у консольному середовищі.


ДОДАТОК А ВІДЕОЗАПИС
 https://youtu.be/X9pC3RMu9FU
 00:00-00:50 — Вступ та постановка завдання
 00:50-01:20 — Структура файлів проекту
 01:20-02:10 — Демонстрація покупки товарів
 02:10-02:50 — Тестування валідації вводу
 02:50-03:50 — Налаштування профілю користувача
 03:50-04:20 — Огляд архітектури програми
 04:20-05:20 — Клас Item та завантаження даних
 05:20-06:20 — Допоміжні функції форматування
 06:20-07:20 — Функції виведення меню та товарів
 07:20-08:30 — Головна логіка програми


     ДОДАТОК Б
     Структура JSON файлу з даними
       01: {
       02:     "Items": {
       03:         "1": {
       04:             "name": "Молоко пастеризоване",
       05:             "price": "12"
       06:         },
       07:         "2": {
       08:             "name": "Хліб чорний",
       09:             "price": "9"
       10:         },
       11:         "3": {
       12:             "name": "Сир білий",
       13:             "price": "21"
       14:         },
       15:         "4": {
       16:             "name": "Сметана 20%",
       17:             "price": "25"
       18:         },
       19:         "5": {
       20:             "name": "Кефір 1%",
       21:             "price": "19"
       22:         },
       23:         "6": {
       24:             "name": "Вода газована",
       25:             "price": "18"
       26:         },
       27:         "7": {
       28:             "name": "Печиво \"Весна\"",
       29:             "price": "14"
       30:         }
       31:     }
       32: }
       


     Додаток В
     Повний код програми
     task3.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab2/smp-pzpi-23-3-chuvaiev-artem-lab2-code/task3.php
       001: #!/usr/bin/env php
       002: 
       003: <?php
       004: class Item
       005: {
       006:     public $id;
       007:     public $name;
       008:     public $price;
       009: 
       010:     public function __construct($id, $name, $price)
       011:     {
       012:         $this->id = $id;
       013:         $this->name = $name;
       014:         $this->price = $price;
       015:     }
       016: }
       017: 
       018: class Program
       019: {
       020:     private $items = [];
       021:     private $user_name;
       022:     private $user_age;
       023: 
       024:     public function __construct()
       025:     {
       026:         $jsonData = file_get_contents('task3-items.json');
       027:         $data = json_decode($jsonData, true);
       028: 
       029:         foreach ($data['Items'] as $id => $itemData) {
       030:             $this->items[] = new Item($id, $itemData['name'], $itemData['price']);
       031:         }
       032:     }
       033: 
       034:     private function printMenu(): void
       035:     {
       036:         echo ("################################\n");
       037:         echo ("# ПРОДОВОЛЬЧИЙ МАГАЗИН \"ВЕСНА\" #\n");
       038:         echo ("################################\n");
       039:         echo ("1 Вибрати товари\n");
       040:         echo ("2 Отримати підсумковий рахунок\n");
       041:         echo ("3 Налаштувати свій профіль\n");
       042:         echo ("0 Вийти з програми\n");
       043:     }
       044: 
       045:     private function getStringLength($str)
       046:     {
       047:         $chars = preg_split('//u', $str, -1, PREG_SPLIT_NO_EMPTY);
       048:         return count($chars);
       049:     }
       050: 
       051:     private function getLongestString(array $items): int
       052:     {
       053:         $longest = 0;
       054:         foreach ($items as $value) {
       055:             $currlen = $this->getStringLength($value->name);
       056:             if ($longest < $currlen) { 
       057:                 $longest = $currlen;
       058:             }
       059:         }
       060:         return $longest;
       061:     }
       062: 
       063:     private function printItems(): void
       064:     {
       065:         $longest = $this->getLongestString($this->items);
       066:         echo "№  НАЗВА" . str_repeat(" ", $longest - 5) . "  ";
       067:         echo "ЦІНА\n";
       068:         for ($i = 0; $i < count($this->items); $i += 1) {
       069:             echo $this->items[$i]->id . "  ";
       070:             echo $this->items[$i]->name . str_repeat(" ", $longest - $this->getStringLength($this->items[$i]->name)). "  ";
       071:             echo $this->items[$i]->price . "\n";
       072:         }
       073:         echo ("-----------------\n");
       074:         echo ("0  ПОВЕРНУТИСЯ\n");
       075:     }
       076: 
       077:     private function displayCart(array $cart): void
       078:     {
       079:         $longest = $this->getLongestString($this->items);
       080:         echo ("У КОШИКУ:\n");
       081:         echo "НАЗВА" . str_repeat(" ", $longest - 5) . "  ";
       082:         echo("КІЛЬКІСТЬ\n");
       083:         for ($i = 0; $i < count($this->items); $i++) {
       084:             if ($cart[$i] > 0) {
       085:                 echo $this->items[$i]->name . str_repeat(" ", $longest - $this->getStringLength($this->items[$i]->name)) . "  ";
       086:                 echo $cart[$i] . "\n";
       087:                 echo "\n";
       088:             }
       089:         }
       090:     }
       091: 
       092:     public function main()
       093:     {
       094:         $cart = array_fill(0, count($this->items), 0);
       095:         $selected = -1;
       096: 
       097:         while (true) {
       098:             $this->printMenu();
       099:             $selected = readline("Введіть команду: ");
       100:             switch ($selected) {
       101:                 case 1:
       102:                     while (1) {
       103:                         $this->printItems();
       104:                         $selectedItem = readline("Виберіть товар: ");
       105:                         if ($selectedItem == 0) {
       106:                             break;
       107:                         }
       108: 
       109:                         if ($selectedItem < 0 || $selectedItem > count($this->items)) {
       110:                             echo ("ПОМИЛКА! ВКАЗАНО НЕПРАВИЛЬНИЙ НОМЕР ТОВАРУ\n");
       111:                             continue;
       112:                         }
       113:                         $selectedAmount = readline("Введіть кількість, штук: ");
       114:                         if ($selectedAmount < 0 || $selectedAmount > 100) {
       115:                             echo ("ПОМИЛКА! Невірна кількість\n");
       116:                             continue;
       117:                         }
       118:                         if ($selectedAmount == 0) {
       119:                             if ($cart[$selectedItem - 1] > 0) {
       120:                                 echo ("ВИДАЛЯЮ З КОШИКА\n");
       121:                                 $cart[$selectedItem - 1] = 0;
       122:                             }
       123: 
       124:                             $isEmpty = true;
       125:                             foreach ($cart as $value) {
       126:                                 if ($value > 0) {
       127:                                     $isEmpty = false;
       128:                                     break;
       129:                                 }
       130:                             }
       131:                             if ($isEmpty) {
       132:                                 echo ("КОШИК ПОРОЖНІЙ\n");
       133:                             }
       134:                         } else {
       135:                             $cart[$selectedItem - 1] = $selectedAmount;
       136:                             $this->displayCart($cart);
       137:                         }
       138:                     }
       139:                     break;
       140:                 case 2:
       141:                     $total = 0;
       142:                     $longest = $this->getLongestString($this->items);
       143:                     echo "№  НАЗВА" . str_repeat(" ", $longest - 5) . "  ";
       144:                     echo "ЦІНА  КІЛЬКІСТЬ  ВАРТІСТЬ\n";
       145:                     $num = 1;
       146:                     for ($i = 0; $i < count($this->items); $i++) {
       147:                         if ($cart[$i] > 0) {
       148:                             $cost = $cart[$i] * $this->items[$i]->price;
       149:                             echo $num . "  ";
       150:                             echo $this->items[$i]->name . str_repeat(" ", $longest - $this->getStringLength($this->items[$i]->name)) . "  ";
       151:                             echo $this->items[$i]->price . str_repeat(" ", 4 - $this->getStringLength($this->items[$i]->price)) . "  ";
       152:                             echo $cart[$i] . str_repeat(" ", 9 - $this->getStringLength($cart[$i])) . "  ";
       153:                             echo $cost . "\n";
       154:                             $total += $cost;
       155: 
       156:                             $num++;
       157:                         }
       158:                     }
       159:                     echo ("РАЗОМ ДО CПЛАТИ: $total\n");
       160:                     echo "\n";
       161:                     break;
       162:                 case 3:
       163:                     while (true) {
       164:                         $name = readline("Ваше імʼя: ");
       165:                         if (!preg_match('/\p{L}/u', $name)) {
       166:                             echo ("Імʼя користувача не може бути порожнім і повинно містити хоча б одну літеру.\n");
       167:                             continue;
       168:                         }
       169:                         $this->user_name = $name;
       170:                         break;
       171:                     }
       172: 
       173:                     while (true) {
       174:                         $age = readline("Ваш вік: ");
       175:                         if ($age < 7 || $age > 150) {
       176:                             echo ("Користувач не може бути молодшим 7-ми або старшим 150-ти років\n");
       177:                             continue;
       178:                         }
       179:                         $this->user_age = $age;
       180:                         break;
       181:                     }
       182:                     echo ("Профіль встановлено: {$this->user_name}, {$this->user_age} років\n");
       183:                     echo "\n";
       184:                     break;
       185:                 case 0:
       186:                     echo ("До побачення!\n");
       187:                     return 0;
       188:                 default:
       189:                     echo ("ПОМИЛКА! Введіть правильну команду\n");
       190:             }
       191:         }
       192:     }
       193: }
       194: 
       195: $program = new Program();
       196: $program->main();
       197: ?>
     24
     
     
