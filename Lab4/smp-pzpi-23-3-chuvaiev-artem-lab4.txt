Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра Програмної інженерії



Звіт
З лабораторної роботи №4
з дисципліни «Скриптові мови програмування»









Виконав									Перевірив
ст.гр ПЗПІ-23-3 Чуваєв А.О.						ст. в. Сокорчук І.П.







Харків 2025
     СТРУКТУРУВАННЯ КОДУ, РОБОТА З ФОРМАМИ, АВТЕНТИФІКАЦІЯ ТА АВТОРИЗАЦІЯ
     Мета роботи: Навчитися масштабувати код програм, працювати з формами, здійснювати авторизацію та обмеження прав доступу.
     Хід роботи:
1. Перехід до реалізації за допомогою СУБД SQLite.
     Для виконання переходу, потрібно було встановити локально SQLite, та написати клас конектор, що буде запезпечувати інтерфейс для роботи з PDO:
       01: <?php
       02: class DatabaseConnector
       03: {
       04:     private $pdo;
       05: 
       06:     public function __construct($pathToDbFile)
       07:     {
       08:         $absolutePath = realpath(__DIR__ . "/../" . $pathToDbFile);
       09: 
       10:         if (!file_exists($absolutePath)) {
       11:             throw new Exception("Database file not found: $absolutePath");
       12:         }
       13: 
       14:         $this->pdo = new PDO("sqlite:" . $absolutePath);
       15:         $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
       16:     }
       17: 
       18:     public function execute($sql, $params = [])
       19:     {
       20:         $stmt = $this->pdo->prepare($sql);
       21:         return $stmt->execute($params);
       22:     }
       23: 
       24:     public function fetchAll($sql, $params = [])
       25:     {
       26:         $stmt = $this->pdo->prepare($sql);
       27:         $stmt->execute($params);
       28:         return $stmt->fetchAll(PDO::FETCH_ASSOC);
       29:     }
       30: 
       31:     public function fetchOne($sql, $params = [])
       32:     {
       33:         $stmt = $this->pdo->prepare($sql);
       34:         $stmt->execute($params);
       35:         return $stmt->fetch(PDO::FETCH_ASSOC);
       36:     }
       37:     
       38:     public function getLastInsertId()
       39:     {
       40:         return $this->pdo->lastInsertId();
       41:     }
       42: }
       43: 
       44: $database = new DatabaseConnector("sql/webshop.db");
       45: ?>
     В цьому конекторі написані основні методи взаємодії з базою даних, що потрібні для реалізації цієї лабораторної роботи, а саме виконати запит, отримати один запис, отримати всі записи, а також отримати ідентифікатор останнього записаного в базу елементу. А також в кінці проходить ініціалізація глобального об’єкту, що надалі буде використано в класі Program.
     Далі йде код ініціалізації, в якому перевіряється чи існує таблиця, що потрібна для програми, а також заповнюються дані з продуктами.
       01: <?php
       02: include_once("./classes/entities.php");
       03: 
       04: $database->execute("
       05:     create table if not exists products (
       06:         id integer primary key autoincrement, name text not null, price integer not null
       07:     )
       08: ");
       09: 
       10: $result = $database->fetchOne("select count(*) as count from products");
       11: $count = (int) $result['count'];
       12: 
       13: if ($count == 0) {
       14:     $database->execute("
       15:         insert into products (name, price) values
       16:         ('Молоко пастеризоване', 12),
       17:         ('Хліб чорний', 9),
       18:         ('Сир білий', 21),
       19:         ('Сметана 20%', 25),
       20:         ('Кефір 1%', 19),
       21:         ('Вода газована', 25),
       22:         ('Печиво \"Весна\"', 25);
       23:     ");
       24: }
       25: 
       26: $program = new Program($database);
       27: 
       28: if (session_status() === PHP_SESSION_NONE) {
       29:     session_start();
       30: 
       31:     if (!isset($_SESSION['cart'])) {
       32:         $_SESSION['cart'] = [];
       33:     
       34:         foreach ($program->items as $id => $item) {
       35:             $_SESSION['cart'][$id] = 0;
       36:         }
       37:     }
       38: }
       39: ?>
      Також трохи змін зазнав і сам клас Program, бо тепер для отримання всіх продуктів, використовується sql-запит SELECT * FROM Products.
       16: class Program
       17: {
       18:     public $items = [];
       19: 
       20:     public function __construct($database)
       21:     {
       22:         $data = $database->fetchAll("SELECT * FROM PRODUCTS");
       23: 
       24:         foreach ($data as $itemData) {
       25:             $this->items[] = new Item($itemData['id'], $itemData['name'], $itemData['price']);
       26:         }
       27:     }
       28: }
       29:
       
2. Прибрати дублювання шапки та підвалу сайту.
     В ході виконання минулої лабораторної роботи, вже було прибрано дублювання самого коду шапки та підвалу. Але в цій лабортаорній роботі було реалізовано базову маршрутизацію за допомогою switch змінної, та параметру запиту в URL з ім’ям page в файлі index.php.
       01: <?php
       02: include_once("./scripts/database.php");
       03: include_once("./scripts/init.php");
       04: ?>
       05: <!DOCTYPE html>
       06: <html lang="uk">
       07: 
       08: <head>
       09:     <meta charset="UTF-8">
       10:     <title>Мій сайт</title>
       11:     <meta name="viewport" content="width=device-width, initial-scale=1.0">
       12:     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
       13:     <link rel="stylesheet" href="./styles/style.css">
       14:     <link rel="stylesheet" href="./styles/products.css">
       15: </head>
       16: 
       17: <body>
       18: 
       19:     <?php include_once("./layout/header.php"); ?>
       20: 
       21:     <div class="content">
       22:         <?php
       23:         $page = isset($_GET['page']) ? $_GET['page'] : 'home';
       24: 
       25:         switch ($page) {
       26:             case "cart":
       27:                 require_once("cart.php");
       28:                 break;
       29:             case "profile":
       30:                 require_once("profilePage.php");
       31:                 break;
       32:             case "products":
       33:                 require_once("products.php");
       34:                 break;
       35:             case "login":
       36:                 require_once("login.php");
       37:                 break;
       38:             case "home":
       39:                 require_once("home.php");
       40:                 break;
       41:             default:
       42:                 require_once("page404.php");
       43:                 break;
       44:         }
       45:         ?>
       46:     </div>
       47: 
       48:     <?php include_once("./layout/footer.php"); ?>
       49: 
       50: </body>
       51: 
       52: </html>
3. Сторінка логіну для незареєстрованих користувачів.
     Першим завданням в цьому пункті є зміна хедеру. Якщо користувач не зареєстрований, то йому має бути доступним кнопка логіну, в іншому випадку профіль, кошик та логаут. 
       01: <style>
       02:     a {
       03:         text-decoration: none;
       04:         color: black;
       05:         font-family: 'Arial, Helvetica, sans-serif';
       06:         font-size: large;
       07:     }
       08: </style>
       09: 
       10: <header style="display: flex; justify-content: space-between; align-items: center; margin: 0 auto; height: 30px; padding: 0%;">
       11:     <a style="text-decoration: none;" href="../index.php">
       12:         <i class="fas fa-home" style="font-size:24px"></i> Home
       13:     </a>
       14:     <p>|</p>
       15:     <a href="../index.php?page=products">
       16:         <i class="fas fa-box-open" style="font-size:24px"></i> Products
       17:     </a>
       18:     <p>|</p>
       19:     <?php
       20:     if (isset($_SESSION['username'])) {
       21:         echo '<a href="../index.php?page=cart">
       22:                 <i class="fas fa-shopping-cart" style="font-size:24px"></i> Cart
       23:               </a>';
       24:         echo '<p>|</p>';
       25:         echo 
       26:         '<a href="../index.php?page=profile">
       27:             <i class="fas fa-user" style="font-size:24px"></i> Profile
       28:         </a>';
       29:         echo '<p>|</p>';
       30:         echo 
       31:         '<form id="logout-form" action="../scripts/logout.php" method="POST" style="display:inline;">
       32:             <button type="submit" style="background:none; border:none; padding:0; cursor:pointer;">
       33:                 <i class="fas fa-user" style="font-size:24px"></i> <a>Logout</a>
       34:             </button>
       35:         </form>';
       36:     } else {
       37:         echo '<a href="../index.php?page=login">
       38:                 <i class="fas fa-sign-in-alt" style="font-size:24px"></i> Login
       39:               </a>';
       40:     }
       41:     ?>
       42: </header>
     В цьому коді, через звертання до сесії, перевіряється чи авторизований користувач.
     Наступним завданням було зберегти від неавторизованих користувачів сторінку продуктів та кошику. Для цього, до кожної з цих сторінок було додано відповідний код перевірки, який закриває доступ до цих сторінок неавторизованим користувачам.
       05: <?php
       06: if (!isset($_SESSION['username'])) {
       07:     header("Location: ../index.php?page=unauth");
       08:     exit;
       09: }
       10: ?>
     Далі потрібно було створити файл credentials.php, в якому збергіються логін та паролі юзерів, що мають доступ до системи, щоб не збергіати їх в базі даних. 
       1: <?php
       2: global $credentials;
       3: 
       4: $credentials = [
       5:     'username' => 'artem',
       6:     'password' => 'Artem_12345',
       7: ];
     І головним була реалізація самої логіки форми логіну. Отже, було створено форму, в якій користувач вводить ім’я користувача та пароль, і якщо все вірно і цей користувач з таким паролем наявний в глобальному масиві credentials.php, то користувача буде перенесено до сторінки з профілем.
     Код форми:
       01: <h1>Зареєтруйтесь</h1>
       02: 
       03: <form method="post" action="./scripts/login.php">
       04:     <div style="display: flex; flex-direction:column; gap:10px; align-items: center; justify-content:center">
       05:         <label>Введіть ім'я користувача</label>
       06:         <input required name="username" type="text" placeholder="Ім'я користувача">
       07:         <label>Введіть ім'я користувача</label>
       08:         <input required name="password" type="password" placeholder="Пароль">
       09:         <button type="submit" class="submit-button">Увійти</button>
       10:     </div>
       11: </form>
     Код хендлеру:
       01: <?php
       02:     include_once("../credentials.php"); 
       03:     session_start();
       04:     if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['username']) && isset($_POST['password'])){
       05:         if($credentials['username'] != $_POST['username'] || $credentials['password'] != $_POST['password'])
       06:         {
       07:             header("Location: ../index.php?page=login");
       08:             exit();
       09:         }
       10:         $_SESSION['username'] = $_POST['username'];
       11:         $_SESSION['authorized_at'] = time();
       12: 
       13:         header("Location: ../index.php?page=profile");
       14:         exit();
       15:     }
       16: ?>
     В хендлері, як раз і виконується ця перевірка, і в сесію записується час авторизації, а також ім’я авторизованого користувача.
     А також останній пункт це logout, що відображається авторизованому користувачу. Під час натискання на цю кнопку, буде виконано код, що анулює всю сесію цього користувача за допомогою команд unset():
       01:     <?php
       02:     session_start();
       03: 
       04:     include_once('../profile.php');
       05:     include_once('../credentials.php');
       06: 
       07:     if ($_SERVER['REQUEST_METHOD'] === 'POST') {
       08:         unset($_SESSION['username']);
       09:         unset($_SESSION['authorized_at']);
       10:         unset($credentials);
       11:         unset($_SESSION['cart']);
       12:         unset($_SESSION['profile']);
       13:         unset($profile);
       14: 
       15:         header("Location: ../index.php?page=login");
       16:     }
4. Сторінка профілю користувача
     Для реалізації цього завдання було створено глобальний масив profile.php, що буде збергіатися в сесії, для того, щоб дані не втрачались поміж запитів. Було створено 2 форми, першу, що має в собі ім’я, прізвище, короткий опис та вік народження та другу, що відповідає за додавання зображення профілю. Також, якщо хоча-б одна з валідацій на текстовій формі не проходить, то користувачу повертається відповідне повідомлення через сесію, що відображає некоректність форми і надає можливість  виправити внесені дані користувачем.
       01: <?php
       02: $profileErrors = $_SESSION['profile_errors'] ?? [];
       03: $imageErrors = $_SESSION['image_errors'] ?? [];
       04: $successMessage = $_SESSION['success_message'] ?? '';
       05: 
       06: unset($_SESSION['profile_errors']);
       07: unset($_SESSION['image_errors']);
       08: unset($_SESSION['success_message']);
       09: 
       10: $profile = $_SESSION['profile'] ?? [];
       11: 
       12: $tempProfileData = $_SESSION['temp_profile_data'] ?? [];
       13: unset($_SESSION['temp_profile_data']);
       14: 
       15: $name = isset($tempProfileData['name']) ? $tempProfileData['name'] : ($profile['name'] ?? '');
       16: $surname = isset($tempProfileData['surname']) ? $tempProfileData['surname'] : ($profile['surname'] ?? '');
       17: $dob = isset($tempProfileData['dob']) ? $tempProfileData['dob'] : ($profile['dob'] ?? '');
       18: $description = isset($tempProfileData['description']) ? $tempProfileData['description'] : ($profile['description'] ?? '');
       19: $image = $profile['image'] ?? null;
       20: ?>
       21: 
       22: <link rel="stylesheet" href="./styles/profile.css">
       23: 
       24: <div class="profile-container">
       25:     <h1>User Profile</h1>
       26:     
       27:     <?php if ($successMessage): ?>
       28:         <div class="success-message"><?= htmlspecialchars($successMessage) ?></div>
       29:     <?php endif; ?>
       30:     
       31:     <div class="profile-forms">
       32:         <div class="image-form-container">
       33:             <h2>Profile Picture</h2>
       34:             
       35:             <?php if (!empty($imageErrors)): ?>
       36:                 <div class="error-messages">
       37:                     <?php foreach ($imageErrors as $error): ?>
       38:                         <p class="error"><?= htmlspecialchars($error) ?></p>
       39:                     <?php endforeach; ?>
       40:                 </div>
       41:             <?php endif; ?>
       42:             
       43:             <form action="./scripts/profile.php" method="POST" enctype="multipart/form-data" class="image-form">
       44:                 <div class="image-preview">
       45:                     <?php if ($image): ?>
       46:                         <img src="<?= htmlspecialchars($image) ?>" alt="Profile Picture">
       47:                     <?php else: ?>
       48:                         <div class="placeholder">No Image</div>
       49:                     <?php endif; ?>
       50:                 </div>
       51:                 <div class="file-input-container">
       52:                     <input type="file" id="profilePicture" name="profilePicture" accept="image/jpeg,image/png,image/gif">
       53:                     <button type="submit" name="uploadImage">Upload Image</button>
       54:                 </div>
       55:             </form>
       56:         </div>
       57:         
       58:         <div class="profile-form-container">
       59:             <h2>Personal Information</h2>
       60:             
       61:             <?php if (!empty($profileErrors)): ?>
       62:                 <div class="error-messages">
       63:                     <?php foreach ($profileErrors as $error): ?>
       64:                         <p class="error"><?= htmlspecialchars($error) ?></p>
       65:                     <?php endforeach; ?>
       66:                 </div>
       67:             <?php endif; ?>
       68:             
       69:             <form action="./scripts/profile.php" method="POST" class="profile-form">
       70:                 <div class="row">
       71:                     <div class="form-group">
       72:                         <label for="name">Name:</label>
       73:                         <input type="text" id="name" name="name" value="<?= htmlspecialchars($name) ?>">
       74:                     </div>
       75:                     
       76:                     <div class="form-group">
       77:                         <label for="surname">Surname:</label>
       78:                         <input type="text" id="surname" name="surname" value="<?= htmlspecialchars($surname) ?>">
       79:                     </div>
       80:                 </div>
       81:                 
       82:                 <div class="form-group">
       83:                     <label for="dob">Date of Birth:</label>
       84:                     <input type="date" id="dob" name="dob" value="<?= htmlspecialchars($dob) ?>">
       85:                 </div>
       86:                 
       87:                 <div class="form-group">
       88:                     <label for="description">Brief Description (min 50 characters):</label>
       89:                     <textarea id="description" name="description" rows="7"><?= htmlspecialchars($description) ?></textarea>
       90:                 </div>
       91:                 
       92:                 <div class="buttons">
       93:                     <button type="submit" name="updateProfile">Save Profile</button>
       94:                 </div>
       95:             </form>
       96:         </div>
       97:     </div>
       98: </div>
     Код хендлеру для обох форм:
       001: <?php
       002: session_start();
       003: 
       004: function validateProfileData($data) {
       005:     $errors = [];
       006:     
       007:     if (empty(trim($data['name']))) {
       008:         $errors[] = "Ім'я не може бути порожнім";
       009:     } elseif (strlen(trim($data['name'])) <= 1) {
       010:         $errors[] = "Ім'я має містити більше одного символу";
       011:     }
       012:     
       013:     if (empty(trim($data['surname']))) {
       014:         $errors[] = "Прізвище не може бути порожнім";
       015:     } elseif (strlen(trim($data['surname'])) <= 1) {
       016:         $errors[] = "Прізвище має містити більше одного символу";
       017:     }
       018:     
       019:     if (empty($data['dob'])) {
       020:         $errors[] = "Дата народження обов'язкова";
       021:     } else {
       022:         $birthDate = new DateTime($data['dob']);
       023:         $today = new DateTime();
       024:         $age = $birthDate->diff($today)->y;
       025:         
       026:         if ($age < 16) {
       027:             $errors[] = "Вам має бути не менше 16 років";
       028:         }
       029:     }
       030:     
       031:     if (empty(trim($data['description']))) {
       032:         $errors[] = "Опис не може бути порожнім";
       033:     } elseif (strlen(trim($data['description'])) < 50) {
       034:         $errors[] = "Опис має містити не менше 50 символів";
       035:     }
       036:     
       037:     return $errors;
       038: }
       039: 
       040: $profileErrors = [];
       041: $imageErrors = [];
       042: 
       043: if (isset($_POST['updateProfile'])) {
       044:     $profileData = [
       045:         'name' => $_POST['name'] ?? '',
       046:         'surname' => $_POST['surname'] ?? '',
       047:         'dob' => $_POST['dob'] ?? '',
       048:         'description' => $_POST['description'] ?? ''
       049:     ];
       050:     
       051:     $profileErrors = validateProfileData($profileData);
       052:     
       053:     if (empty($profileErrors)) {
       054:         $profile = $_SESSION['profile'] ?? [];
       055:         
       056:         $profile['name'] = trim($profileData['name']);
       057:         $profile['surname'] = trim($profileData['surname']);
       058:         $profile['dob'] = $profileData['dob'];
       059:         $profile['description'] = trim($profileData['description']);
       060:         
       061:         $_SESSION['profile'] = $profile;
       062:         
       063:         $_SESSION['success_message'] = "Дані профілю успішно оновлено";
       064:         
       065:         header("Location: ../index.php?page=profile");
       066:         exit();
       067:     } else {
       068:         $_SESSION['temp_profile_data'] = $profileData;
       069:         $_SESSION['profile_errors'] = $profileErrors;
       070:         
       071:         header("Location: ../index.php?page=profile");
       072:         exit();
       073:     }
       074: }
       075: 
       076: if (isset($_POST['uploadImage'])) {
       077:     if (isset($_FILES['profilePicture']) && $_FILES['profilePicture']['error'] === UPLOAD_ERR_OK) {
       078:         $fileTmpPath = $_FILES['profilePicture']['tmp_name'];
       079:         $fileName = $_FILES['profilePicture']['name'];
       080:         $fileExtension = strtolower(pathinfo($fileName, PATHINFO_EXTENSION));
       081:         $allowedExtensions = ['jpg', 'jpeg', 'png', 'gif'];
       082:         
       083:         if (in_array($fileExtension, $allowedExtensions)) {
       084:             $uploadDir = __DIR__ . '/../images/';
       085:             if (!is_dir($uploadDir)) {
       086:                 mkdir($uploadDir, 0755, true);
       087:             }
       088:             $newFileName = uniqid('profile_', true) . '.' . $fileExtension;
       089:             $destination = $uploadDir . $newFileName;
       090:             
       091:             if (move_uploaded_file($fileTmpPath, $destination)) {
       092:                 $profile = $_SESSION['profile'] ?? [];
       093:                 
       094:                 $profile['image'] = 'images/' . $newFileName;
       095:                 
       096:                 $_SESSION['profile'] = $profile;
       097:                 
       098:                 $_SESSION['success_message'] = "Зображення профілю успішно оновлено";
       099:             } else {
       100:                 $imageErrors[] = "Помилка при завантаженні зображення";
       101:                 $_SESSION['image_errors'] = $imageErrors;
       102:             }
       103:         } else {
       104:             $imageErrors[] = "Дозволені типи файлів: jpg, jpeg, png, gif";
       105:             $_SESSION['image_errors'] = $imageErrors;
       106:         }
       107:     } else {
       108:         $imageErrors[] = "Будь ласка, виберіть зображення";
       109:         $_SESSION['image_errors'] = $imageErrors;
       110:     }
       111:     
       112:     header("Location: ../index.php?page=profile");
       113:     exit();
       114: }
       115: ?>
     В коді хендлеру написано функцію перевірки даних, щоб відповідати поставленим вимогам валідації – не порожнє ім’я та прізвище, користувачу більше 16 років, а також довжина опису більше 50 символів. Якщо хоча-б одна з вимог не виконується, то дані не буде записано і користувачу буде надіслано повідомлення про некоректні дані. А відносно відправки зображення профілю, то воно отримує метадані зображення за допомогою змінної $FILES, а також зберігає його в папку images/ за допомогою унікального ідетифікатору, щоб уникнути редуплікації назв зображень і повертає відповідні повідомлення через сесію.
     Висновок
     У цій лабораторній роботі було реалізовано авторизацію користувачів, сторінку профілю з редагуванням даних і завантаженням фото, а також усунуто дублювання шапки та підвалу сайту. Отримано практичні навички роботи з сесіями, формами та обробкою файлів у PHP, що дозволяє створювати більш безпечні та структуровані веб застосунки.


     ДОДАТОК А Відеозапис
 https://youtu.be/8t2oosH6RzE
 00:00 — Вступ та постановка завдання
 00:45 — Демонстрація системи авторизації
 01:02 — Тестування входу в систему
 01:25 — Огляд функціоналу продуктів та кошика
 01:45 — Демонстрація сторінки профілю
 01:52 — Тестування валідації форм
 02:30 — Завантаження зображень профілю
 02:44 — Тестування logout функціоналу
 02:49 — Огляд структури файлів
 03:56 — Пояснення навігації через query-параметри
 04:38 — Огляд коду сторінки продуктів
 04:55 — Детальний розбір коду профілю
 05:58 — Аналіз форм профілю
 06:53 — Валідація даних профілю
 08:12 — Обробка завантаження файлів
 10:02 — Реалізація системи логіну
 11:13 — Інтеграція з базою даних SQLite
 12:01 — Клас Database та підключення
 12:44 — Робота з продуктами через базу даних
 13:35 — Завершення презентації


 ДОДАТОК В ПОВНИЙ КОД ПРОГРАМИ
 entities.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/classes/entities.php
       01: <?php
       02: class Item
       03: {
       04:     public $id;
       05:     public $name;
       06:     public $price;
       07: 
       08:     public function __construct($id, $name, $price)
       09:     {
       10:         $this->id = $id;
       11:         $this->name = $name;
       12:         $this->price = $price;
       13:     }
       14: }
       15: 
       16: class Program
       17: {
       18:     public $items = [];
       19: 
       20:     public function __construct($database)
       21:     {
       22:         $data = $database->fetchAll("SELECT * FROM PRODUCTS");
       23: 
       24:         foreach ($data as $itemData) {
       25:             $this->items[] = new Item($itemData['id'], $itemData['name'], $itemData['price']);
       26:         }
       27:     }
       28: }
       29: 
       30: ?>
 footer.php:  https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/layout/footer.php
       01: <style>
       02:     a {
       03:         text-decoration: none;
       04:         color: black;
       05:         font-family: 'Arial, Helvetica, sans-serif';
       06:         font-size: large;
       07:     }
       08: </style>
       09: 
       10: <footer style="display: flex; justify-content: space-around; align-items: center; margin: 0 auto; height: 30px; padding: 0%;">
       11:     <a style="text-decoration: none;" href="../index.php">
       12:         Home
       13:     </a>
       14:     <p>|</p>
       15:     <a href="../index.php?page=products">
       16:         Products
       17:     </a>
       18:     <p>|</p>
       19:     <a href="../index.php?page=cart">
       20:         Cart
       21:     </a>
       22: </footer>
 header.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/layout/header.php
       01: <style>
       02:     a {
       03:         text-decoration: none;
       04:         color: black;
       05:         font-family: 'Arial, Helvetica, sans-serif';
       06:         font-size: large;
       07:     }
       08: </style>
       09: 
       10: <header style="display: flex; justify-content: space-between; align-items: center; margin: 0 auto; height: 30px; padding: 0%;">
       11:     <a style="text-decoration: none;" href="../index.php">
       12:         <i class="fas fa-home" style="font-size:24px"></i> Home
       13:     </a>
       14:     <p>|</p>
       15:     <a href="../index.php?page=products">
       16:         <i class="fas fa-box-open" style="font-size:24px"></i> Products
       17:     </a>
       18:     <p>|</p>
       19:     <?php
       20:     if (isset($_SESSION['username'])) {
       21:         echo '<a href="../index.php?page=cart">
       22:                 <i class="fas fa-shopping-cart" style="font-size:24px"></i> Cart
       23:               </a>';
       24:         echo '<p>|</p>';
       25:         echo 
       26:         '<a href="../index.php?page=profile">
       27:             <i class="fas fa-user" style="font-size:24px"></i> Profile
       28:         </a>';
       29:         echo '<p>|</p>';
       30:         echo 
       31:         '<form id="logout-form" action="../scripts/logout.php" method="POST" style="display:inline;">
       32:             <button type="submit" style="background:none; border:none; padding:0; cursor:pointer;">
       33:                 <i class="fas fa-user" style="font-size:24px"></i> <a>Logout</a>
       34:             </button>
       35:         </form>';
       36:     } else {
       37:         echo '<a href="../index.php?page=login">
       38:                 <i class="fas fa-sign-in-alt" style="font-size:24px"></i> Login
       39:               </a>';
       40:     }
       41:     ?>
       42: </header>
 addToCart.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/scripts/addToCart.php
       01: <?php
       02: session_start();
       03: 
       04: function isValidQuantity($value)
       05: {
       06:     return is_numeric($value) && intval($value) > 0;
       07: }
       08: 
       09: if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['quantities'])) {
       10:     $quantities = $_POST['quantities'];
       11:     $touched = [];
       12:     $isInvalid = false;
       13:     foreach ($quantities as $productId => $qty) {
       14:         $qty = trim($qty);
       15: 
       16:         if ($qty == 0) {
       17:             continue;
       18:         }
       19:         if (!isValidQuantity($qty)) {
       20:             $isInvalid = true;
       21:         }
       22: 
       23:         $touched[intval($productId)] = $qty;
       24:     }
       25: 
       26:     if ($isInvalid) {
       27:         $_SESSION['form_error'] = "Перевірте будь ласка введені дані";
       28:         $_SESSION['form_data'] = $touched;
       29:         header("Location: ../index.php?page=products");
       30:         exit();
       31:     }
       32: 
       33:     foreach ($touched as $id => $value) {
       34:         if ($value > 0) {
       35:             $_SESSION['cart'][$id] = $value;
       36:         }
       37:     }
       38: 
       39:     unset($_SESSION['form_error'], $_SESSION['form_data']);
       40:     header("Location: ../index.php?page=cart");
       41:     exit();
       42: } else {
       43:     echo "Неправильні дані.";
       44: }
       45:
 cart.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/scripts/cart.php
       01: <?php
       02: function getCart()
       03: {
       04:     if (isset($_SESSION['cart'])) {
       05:         return $_SESSION['cart'];
       06:     }
       07: }
       08: 
       09: function isNotEmpty()
       10: {
       11:     if (isset($_SESSION['cart'])) {
       12:         foreach ($_SESSION['cart'] as $id => $item) {
       13:             if ($item != 0) {
       14:                 return true;
       15:             }
       16:         }
       17:         return false;
       18:     }
       19: }
       20:
 clearCart.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/scripts/clearCart.php
       01: <?php
       02: session_start();
       03: if ($_SERVER['REQUEST_METHOD'] === 'POST') {
       04:     if (isset($_POST['action']) && ($_POST['action'] === 'pay' || $_POST['action'] === 'cancel')) {
       05:         unset($_SESSION['cart']);
       06:     }
       07: }
       08: 
       09: header("Location: ../index.php?page=cart"); 
       10: exit;
 database.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/scripts/database.php
       01: <?php
       02: class DatabaseConnector
       03: {
       04:     private $pdo;
       05: 
       06:     public function __construct($pathToDbFile)
       07:     {
       08:         $absolutePath = realpath(__DIR__ . "/../" . $pathToDbFile);
       09: 
       10:         if (!file_exists($absolutePath)) {
       11:             throw new Exception("Database file not found: $absolutePath");
       12:         }
       13: 
       14:         $this->pdo = new PDO("sqlite:" . $absolutePath);
       15:         $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
       16:     }
       17: 
       18:     public function execute($sql, $params = [])
       19:     {
       20:         $stmt = $this->pdo->prepare($sql);
       21:         return $stmt->execute($params);
       22:     }
       23: 
       24:     public function fetchAll($sql, $params = [])
       25:     {
       26:         $stmt = $this->pdo->prepare($sql);
       27:         $stmt->execute($params);
       28:         return $stmt->fetchAll(PDO::FETCH_ASSOC);
       29:     }
       30: 
       31:     public function fetchOne($sql, $params = [])
       32:     {
       33:         $stmt = $this->pdo->prepare($sql);
       34:         $stmt->execute($params);
       35:         return $stmt->fetch(PDO::FETCH_ASSOC);
       36:     }
       37:     
       38:     public function getLastInsertId()
       39:     {
       40:         return $this->pdo->lastInsertId();
       41:     }
       42: }
       43: 
       44: $database = new DatabaseConnector("sql/webshop.db");
       45: ?>
 deleteFromCart.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/scripts/deleteFromCart.php
       01: <?php
       02: session_start();
       03: if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['remove_id'])) {
       04:     $removeId = $_POST['remove_id'];
       05:     if (isset($_SESSION['cart'][$removeId])) {
       06:         unset($_SESSION['cart'][$removeId]);
       07:     }
       08: }
       09: 
       10: header("Location: ../index.php?page=cart");
       11: exit();
 init.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/scripts/init.php
       01: <?php
       02: include_once("./classes/entities.php");
       03: 
       04: $database->execute("
       05:     create table if not exists products (
       06:         id integer primary key autoincrement, name text not null, price integer not null
       07:     )
       08: ");
       09: 
       10: $result = $database->fetchOne("select count(*) as count from products");
       11: $count = (int) $result['count'];
       12: 
       13: if ($count == 0) {
       14:     $database->execute("
       15:         insert into products (name, price) values
       16:         ('Молоко пастеризоване', 12),
       17:         ('Хліб чорний', 9),
       18:         ('Сир білий', 21),
       19:         ('Сметана 20%', 25),
       20:         ('Кефір 1%', 19),
       21:         ('Вода газована', 25),
       22:         ('Печиво \"Весна\"', 25);
       23:     ");
       24: }
       25: 
       26: $program = new Program($database);
       27: 
       28: if (session_status() === PHP_SESSION_NONE) {
       29:     session_start();
       30: 
       31:     if (!isset($_SESSION['cart'])) {
       32:         $_SESSION['cart'] = [];
       33:     
       34:         foreach ($program->items as $id => $item) {
       35:             $_SESSION['cart'][$id] = 0;
       36:         }
       37:     }
       38: }
       39: ?>
 login.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/scripts/login.php
       01: <?php
       02:     include_once("../credentials.php"); 
       03:     session_start();
       04:     if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['username']) && isset($_POST['password'])){
       05:         if($credentials['username'] != $_POST['username'] || $credentials['password'] != $_POST['password'])
       06:         {
       07:             header("Location: ../index.php?page=login");
       08:             exit();
       09:         }
       10:         $_SESSION['username'] = $_POST['username'];
       11:         $_SESSION['authorized_at'] = time();
       12: 
       13:         header("Location: ../index.php?page=profile");
       14:         exit();
       15:     }
       16: ?>
 logout.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/scripts/logout.php
       01:     <?php
       02:     session_start();
       03: 
       04:     include_once('../profile.php');
       05:     include_once('../credentials.php');
       06: 
       07:     if ($_SERVER['REQUEST_METHOD'] === 'POST') {
       08:         unset($_SESSION['username']);
       09:         unset($_SESSION['authorized_at']);
       10:         unset($credentials);
       11:         unset($_SESSION['cart']);
       12:         unset($_SESSION['profile']);
       13:         unset($profile);
       14: 
       15:         header("Location: ../index.php?page=login");
       16:     }
       17:
 profile.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/scripts/profile.php
       001: <?php
       002: session_start();
       003: 
       004: function validateProfileData($data) {
       005:     $errors = [];
       006:     
       007:     if (empty(trim($data['name']))) {
       008:         $errors[] = "Ім'я не може бути порожнім";
       009:     } elseif (strlen(trim($data['name'])) <= 1) {
       010:         $errors[] = "Ім'я має містити більше одного символу";
       011:     }
       012:     
       013:     if (empty(trim($data['surname']))) {
       014:         $errors[] = "Прізвище не може бути порожнім";
       015:     } elseif (strlen(trim($data['surname'])) <= 1) {
       016:         $errors[] = "Прізвище має містити більше одного символу";
       017:     }
       018:     
       019:     if (empty($data['dob'])) {
       020:         $errors[] = "Дата народження обов'язкова";
       021:     } else {
       022:         $birthDate = new DateTime($data['dob']);
       023:         $today = new DateTime();
       024:         $age = $birthDate->diff($today)->y;
       025:         
       026:         if ($age < 16) {
       027:             $errors[] = "Вам має бути не менше 16 років";
       028:         }
       029:     }
       030:     
       031:     if (empty(trim($data['description']))) {
       032:         $errors[] = "Опис не може бути порожнім";
       033:     } elseif (strlen(trim($data['description'])) < 50) {
       034:         $errors[] = "Опис має містити не менше 50 символів";
       035:     }
       036:     
       037:     return $errors;
       038: }
       039: 
       040: $profileErrors = [];
       041: $imageErrors = [];
       042: 
       043: if (isset($_POST['updateProfile'])) {
       044:     $profileData = [
       045:         'name' => $_POST['name'] ?? '',
       046:         'surname' => $_POST['surname'] ?? '',
       047:         'dob' => $_POST['dob'] ?? '',
       048:         'description' => $_POST['description'] ?? ''
       049:     ];
       050:     
       051:     $profileErrors = validateProfileData($profileData);
       052:     
       053:     if (empty($profileErrors)) {
       054:         $profile = $_SESSION['profile'] ?? [];
       055:         
       056:         $profile['name'] = trim($profileData['name']);
       057:         $profile['surname'] = trim($profileData['surname']);
       058:         $profile['dob'] = $profileData['dob'];
       059:         $profile['description'] = trim($profileData['description']);
       060:         
       061:         $_SESSION['profile'] = $profile;
       062:         
       063:         $_SESSION['success_message'] = "Дані профілю успішно оновлено";
       064:         
       065:         header("Location: ../index.php?page=profile");
       066:         exit();
       067:     } else {
       068:         $_SESSION['temp_profile_data'] = $profileData;
       069:         $_SESSION['profile_errors'] = $profileErrors;
       070:         
       071:         header("Location: ../index.php?page=profile");
       072:         exit();
       073:     }
       074: }
       075: 
       076: if (isset($_POST['uploadImage'])) {
       077:     if (isset($_FILES['profilePicture']) && $_FILES['profilePicture']['error'] === UPLOAD_ERR_OK) {
       078:         $fileTmpPath = $_FILES['profilePicture']['tmp_name'];
       079:         $fileName = $_FILES['profilePicture']['name'];
       080:         $fileExtension = strtolower(pathinfo($fileName, PATHINFO_EXTENSION));
       081:         $allowedExtensions = ['jpg', 'jpeg', 'png', 'gif'];
       082:         
       083:         if (in_array($fileExtension, $allowedExtensions)) {
       084:             $uploadDir = __DIR__ . '/../images/';
       085:             if (!is_dir($uploadDir)) {
       086:                 mkdir($uploadDir, 0755, true);
       087:             }
       088:             $newFileName = uniqid('profile_', true) . '.' . $fileExtension;
       089:             $destination = $uploadDir . $newFileName;
       090:             
       091:             if (move_uploaded_file($fileTmpPath, $destination)) {
       092:                 $profile = $_SESSION['profile'] ?? [];
       093:                 
       094:                 $profile['image'] = 'images/' . $newFileName;
       095:                 
       096:                 $_SESSION['profile'] = $profile;
       097:                 
       098:                 $_SESSION['success_message'] = "Зображення профілю успішно оновлено";
       099:             } else {
       100:                 $imageErrors[] = "Помилка при завантаженні зображення";
       101:                 $_SESSION['image_errors'] = $imageErrors;
       102:             }
       103:         } else {
       104:             $imageErrors[] = "Дозволені типи файлів: jpg, jpeg, png, gif";
       105:             $_SESSION['image_errors'] = $imageErrors;
       106:         }
       107:     } else {
       108:         $imageErrors[] = "Будь ласка, виберіть зображення";
       109:         $_SESSION['image_errors'] = $imageErrors;
       110:     }
       111:     
       112:     header("Location: ../index.php?page=profile");
       113:     exit();
       114: }
       115: ?>
 products.css: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/styles/products.css
       001: .product-form {
       002:   margin: 0 auto;
       003:   max-width: 600px;
       004:   display: flex;
       005:   flex-direction: column;
       006:   gap: 18px;
       007:   padding: 10px;
       008:   background: #fff;
       009:   border-radius: 10px;
       010:   box-shadow: 0 4px 10px rgb(0 0 0 / 0.05);
       011: }
       012: 
       013: .product-row {
       014:   display: grid;
       015:   grid-template-columns: 2fr 1fr 1fr;
       016:   align-items: center;
       017:   padding: 12px 20px;
       018:   border: 1.5px solid #e0e0e0;
       019:   border-radius: 10px;
       020:   background-color: #fafafa;
       021:   transition: background-color 0.25s ease, box-shadow 0.25s ease;
       022:   cursor: default;
       023: }
       024: 
       025: .product-row:hover {
       026:   background-color: #e8f0fe;
       027:   box-shadow: 0 2px 8px rgb(0 0 0 / 0.1);
       028: }
       029: 
       030: .product-name {
       031:   font-weight: 600;
       032:   font-size: 1.15rem;
       033:   color: #34495e;
       034: }
       035: 
       036: .product-qty {
       037:   width: 70px;
       038:   padding: 6px 10px;
       039:   font-size: 1rem;
       040:   border: 1.5px solid #bbb;
       041:   border-radius: 8px;
       042:   text-align: center;
       043:   transition: border-color 0.3s ease;
       044: }
       045: 
       046: .product-qty:focus {
       047:   border-color: #3498db;
       048:   outline: none;
       049:   box-shadow: 0 0 5px #a3c4f3;
       050: }
       051: 
       052: .product-price {
       053:   font-weight: 700;
       054:   color: #2c3e50;
       055:   font-size: 1.2rem;
       056:   text-align: right;
       057: }
       058: 
       059: .submit-button {
       060:   margin-top: 25px;
       061:   padding: 12px 28px;
       062:   background-color: #3498db;
       063:   border: none;
       064:   color: white;
       065:   font-size: 1.1rem;
       066:   font-weight: 600;
       067:   border-radius: 12px;
       068:   cursor: pointer;
       069:   transition: background-color 0.3s ease, box-shadow 0.3s ease;
       070:   align-self: flex-end;
       071:   box-shadow: 0 4px 12px rgb(52 152 219 / 0.4);
       072: }
       073: 
       074: .submit-button:hover {
       075:   background-color: #2980b9;
       076:   box-shadow: 0 6px 16px rgb(41 128 185 / 0.6);
       077: }
       078: 
       079: @media (max-width: 480px) {
       080:   .product-form {
       081:     max-width: 90%;
       082:     padding: 8px;
       083:   }
       084: 
       085:   .product-row {
       086:     grid-template-columns: 1.5fr 1fr 1fr;
       087:     padding: 10px 12px;
       088:   }
       089: 
       090:   .product-qty {
       091:     width: 55px;
       092:     padding: 5px 8px;
       093:   }
       094: 
       095:   .submit-button {
       096:     width: 100%;
       097:     align-self: center;
       098:   }
       099: }
       100:
 profile.css: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/styles/profile.css
       001: .profile-container {
       002:     max-width: 1000px;
       003:     margin: 0 auto;
       004:     padding: 20px;
       005: }
       006: 
       007: h1 {
       008:     text-align: center;
       009:     margin-bottom: 30px;
       010:     color: #333;
       011: }
       012: 
       013: h2 {
       014:     margin-bottom: 15px;
       015:     color: #444;
       016:     font-size: 1.5rem;
       017: }
       018: 
       019: .success-message {
       020:     background-color: #d4edda;
       021:     color: #155724;
       022:     padding: 10px 15px;
       023:     border-radius: 5px;
       024:     margin-bottom: 20px;
       025:     text-align: center;
       026: }
       027: 
       028: .error-messages {
       029:     background-color: #f8d7da;
       030:     color: #721c24;
       031:     padding: 10px 15px;
       032:     border-radius: 5px;
       033:     margin-bottom: 20px;
       034: }
       035: 
       036: .error {
       037:     margin: 5px 0;
       038: }
       039: 
       040: .profile-forms {
       041:     display: flex;
       042:     gap: 30px;
       043:     flex-wrap: wrap;
       044: }
       045: 
       046: .image-form-container {
       047:     flex: 1;
       048:     min-width: 300px;
       049: }
       050: 
       051: .profile-form-container {
       052:     flex: 2;
       053:     min-width: 400px;
       054: }
       055: 
       056: .image-form, .profile-form {
       057:     background-color: #f9f9f9;
       058:     padding: 20px;
       059:     border-radius: 8px;
       060:     box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
       061: }
       062: 
       063: .image-preview {
       064:     width: 100%;
       065:     height: 250px;
       066:     margin-bottom: 15px;
       067:     display: flex;
       068:     justify-content: center;
       069:     align-items: center;
       070:     background-color: #eee;
       071:     border-radius: 5px;
       072:     overflow: hidden;
       073: }
       074: 
       075: .image-preview img {
       076:     max-width: 100%;
       077:     max-height: 100%;
       078:     object-fit: cover;
       079: }
       080: 
       081: .placeholder {
       082:     display: flex;
       083:     justify-content: center;
       084:     align-items: center;
       085:     width: 100%;
       086:     height: 100%;
       087:     color: #999;
       088:     font-size: 1.2rem;
       089:     background-color: #f0f0f0;
       090: }
       091: 
       092: .file-input-container {
       093:     display: flex;
       094:     flex-direction: column;
       095:     gap: 10px;
       096: }
       097: 
       098: #profilePicture {
       099:     padding: 8px;
       100:     border: 1px solid #ddd;
       101:     border-radius: 4px;
       102:     background-color: white;
       103: }
       104: 
       105: .row {
       106:     display: flex;
       107:     gap: 15px;
       108:     margin-bottom: 15px;
       109: }
       110: 
       111: .form-group {
       112:     flex: 1;
       113:     margin-bottom: 15px;
       114: }
       115: 
       116: label {
       117:     display: block;
       118:     margin-bottom: 5px;
       119:     font-weight: 500;
       120:     color: #555;
       121: }
       122: 
       123: input[type="text"],
       124: input[type="date"],
       125: textarea {
       126:     width: 100%;
       127:     padding: 10px;
       128:     border: 1px solid #ddd;
       129:     border-radius: 4px;
       130:     font-size: 1rem;
       131: }
       132: 
       133: textarea {
       134:     resize: vertical;
       135:     min-height: 150px;
       136: }
       137: 
       138: button:hover {
       139:     background-color: #3a5b85;
       140: }
       141: 
       142: .buttons {
       143:     margin-top: 20px;
       144:     display: flex;
       145:     justify-content: flex-end;
       146: }
 style.css: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/styles/style.css
       01: body {
       02:     margin: 0;
       03:     padding: 0;
       04: }
       05: 
       06: .content{
       07:     min-height: calc(100vh - 60px);
       08:     width: 100%;
       09:     display: flex;
       10:     flex-direction: column;
       11:     justify-content: center;
       12:     align-items: center;
       13: }
 cart.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/cart.php
       01: <?php
       02: include_once("./scripts/cart.php");
       03: ?>
       04: 
       05: <?php
       06: if (!isset($_SESSION['username'])) {
       07:     header("Location: ../index.php?page=unauth");
       08:     exit;
       09: }
       10: ?>
       11: 
       12: <h2>Кошик</h2>
       13: 
       14: <?php if (isNotEmpty()): ?>
       15:     <table cellpadding="8" cellspacing="0">
       16:         <thead>
       17:             <tr>
       18:                 <th>ID</th>
       19:                 <th>Назва</th>
       20:                 <th>Ціна</th>
       21:                 <th>Кількість</th>
       22:                 <th>Сума</th>
       23:                 <th>Дія</th>
       24:             </tr>
       25:         </thead>
       26:         <tbody>
       27:             <?php
       28:             $total = 0;
       29:             foreach (getCart() as $id => $quantity):
       30:                 if ($quantity > 0 && isset($program->items[$id])):
       31:                     $item = $program->items[$id];
       32:                     $sum = $item->price * $quantity;
       33:                     $total += $sum;
       34:             ?>
       35:                     <tr>
       36:                         <td><?= $id ?></td>
       37:                         <td><?= htmlspecialchars($item->name) ?></td>
       38:                         <td>$<?= number_format($item->price, 2) ?></td>
       39:                         <td><?= $quantity ?></td>
       40:                         <td>$<?= number_format($sum, 2) ?></td>
       41:                         <td>
       42:                             <form method="POST" action="./scripts/deleteFromCart.php" style="display:inline;">
       43:                                 <input type="hidden" name="remove_id" value="<?= $id ?>">
       44:                                 <button type="submit">Видалити</button>
       45:                             </form>
       46:                         </td>
       47:                     </tr>
       48:             <?php
       49:                 endif;
       50:             endforeach;
       51:             ?>
       52:             <tr>
       53:                 <td colspan="4" style="text-align:right; font-weight:bold;">Всього:</td>
       54:                 <td colspan="2" style="font-weight:bold;">$<?= number_format($total, 2) ?></td>
       55:             </tr>
       56:         </tbody>
       57:     </table>
       58:     <form method="POST" action="./scripts/clearCart.php" style="margin-top: 20px;">
       59:         <button type="submit" name="action" value="pay">Оплатити</button>
       60:         <button type="submit" name="action" value="cancel">Скасувати</button>
       61:     </form>
       62: <?php else: ?>
       63:     <p>Кошик порожній. <a href="./index.php?page=products">Перейти до покупок</a></p>
       64: <?php endif; ?>
 credentials.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/credentials.php
       1: <?php
       2: global $credentials;
       3: 
       4: $credentials = [
       5:     'username' => 'artem',
       6:     'password' => 'Artem_12345',
       7: ];
 home.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/home.php
       1: <h1>Web інтернет магазин</h1>
 index.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/index.php
       01: <?php
       02: include_once("./scripts/database.php");
       03: include_once("./scripts/init.php");
       04: ?>
       05: <!DOCTYPE html>
       06: <html lang="uk">
       07: 
       08: <head>
       09:     <meta charset="UTF-8">
       10:     <title>Мій сайт</title>
       11:     <meta name="viewport" content="width=device-width, initial-scale=1.0">
       12:     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
       13:     <link rel="stylesheet" href="./styles/style.css">
       14:     <link rel="stylesheet" href="./styles/products.css">
       15: </head>
       16: 
       17: <body>
       18: 
       19:     <?php include_once("./layout/header.php"); ?>
       20: 
       21:     <div class="content">
       22:         <?php
       23:         $page = isset($_GET['page']) ? $_GET['page'] : 'home';
       24: 
       25:         switch ($page) {
       26:             case "cart":
       27:                 require_once("cart.php");
       28:                 break;
       29:             case "profile":
       30:                 require_once("profilePage.php");
       31:                 break;
       32:             case "products":
       33:                 require_once("products.php");
       34:                 break;
       35:             case "login":
       36:                 require_once("login.php");
       37:                 break;
       38:             case "home":
       39:                 require_once("home.php");
       40:                 break;
       41:             default:
       42:                 require_once("page404.php");
       43:                 break;
       44:         }
       45:         ?>
       46:     </div>
       47: 
       48:     <?php include_once("./layout/footer.php"); ?>
       49: 
       50: </body>
       51: 
       52: </html>
 login.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/login.php
       01: <h1>Зареєтруйтесь</h1>
       02: 
       03: <form method="post" action="./scripts/login.php">
       04:     <div style="display: flex; flex-direction:column; gap:10px; align-items: center; justify-content:center">
       05:         <label>Введіть ім'я користувача</label>
       06:         <input required name="username" type="text" placeholder="Ім'я користувача">
       07:         <label>Введіть ім'я користувача</label>
       08:         <input required name="password" type="password" placeholder="Пароль">
       09:         <button type="submit" class="submit-button">Увійти</button>
       10:     </div>
       11: </form>
 page404.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/page404.php
       1: <h1>Будь-ласка, спочатку авторизуйтесь</h1>
 products.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/products.php
       01: <?php
       02: if(!isset($_SESSION['username'])){
       03:     header("Location: ../index.php?page=unauth");
       04: }
       05: ?>
       06: 
       07: <form method="POST" action="./scripts/addToCart.php" class="product-form">
       08:     <?php if (isset($_SESSION['form_error'])): ?>
       09:         <p style="color: red;"><?= $_SESSION['form_error'] ?></p>
       10: 
       11:         <?php foreach ($_SESSION['form_data'] as $id => $badValue): ?>
       12:             <?php if (isset($program->items[$id])): ?>
       13:                 <div class="product-row">
       14:                     <span class="product-name"><?= htmlspecialchars($program->items[$id]->name) ?></span>
       15:                     <input type="number"
       16:                         name="quantities[<?= $id ?>]"
       17:                         value="<?= htmlspecialchars($badValue) ?>"
       18:                         min="-10"
       19:                         class="product-qty">
       20:                     <span class="product-price">$<?= number_format($program->items[$id]->price, 2) ?></span>
       21:                 </div>
       22:             <?php endif; ?>
       23:         <?php endforeach; ?>
       24: 
       25:     <?php else: ?>
       26:         <?php foreach ($program->items as $id => $product): ?>
       27:             <div class="product-row">
       28:                 <span class="product-name"><?= htmlspecialchars($product->name) ?></span>
       29:                 <input type="number"
       30:                     name="quantities[<?= $id ?>]"
       31:                     value="0"
       32:                     min="-10"
       33:                     class="product-qty">
       34:                 <span class="product-price">$<?= number_format($product->price, 2) ?></span>
       35:             </div>
       36:         <?php endforeach; ?>
       37:     <?php endif; ?>
       38: 
       39:     <button type="submit" class="submit-button">Додати до кошика</button>
       40: </form>
       41: <?php
       42: unset($_SESSION['form_error'], $_SESSION['form_data']);
       43: ?>
 profile.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/profile.php
       1: <?php
       2: global $profile;
       3: ?>
 profilePage.php: https://github.com/NureChuvaievArtem/smp-pzpi-23-3-chuvaiev-artem/blob/main/Lab4/smp-pzpi-23-3-chuvaiev-artem-lab4-code/profilePage.php
       01: <?php
       02: $profileErrors = $_SESSION['profile_errors'] ?? [];
       03: $imageErrors = $_SESSION['image_errors'] ?? [];
       04: $successMessage = $_SESSION['success_message'] ?? '';
       05: 
       06: unset($_SESSION['profile_errors']);
       07: unset($_SESSION['image_errors']);
       08: unset($_SESSION['success_message']);
       09: 
       10: $profile = $_SESSION['profile'] ?? [];
       11: 
       12: $tempProfileData = $_SESSION['temp_profile_data'] ?? [];
       13: unset($_SESSION['temp_profile_data']);
       14: 
       15: $name = isset($tempProfileData['name']) ? $tempProfileData['name'] : ($profile['name'] ?? '');
       16: $surname = isset($tempProfileData['surname']) ? $tempProfileData['surname'] : ($profile['surname'] ?? '');
       17: $dob = isset($tempProfileData['dob']) ? $tempProfileData['dob'] : ($profile['dob'] ?? '');
       18: $description = isset($tempProfileData['description']) ? $tempProfileData['description'] : ($profile['description'] ?? '');
       19: $image = $profile['image'] ?? null;
       20: ?>
       21: 
       22: <link rel="stylesheet" href="./styles/profile.css">
       23: 
       24: <div class="profile-container">
       25:     <h1>User Profile</h1>
       26:     
       27:     <?php if ($successMessage): ?>
       28:         <div class="success-message"><?= htmlspecialchars($successMessage) ?></div>
       29:     <?php endif; ?>
       30:     
       31:     <div class="profile-forms">
       32:         <div class="image-form-container">
       33:             <h2>Profile Picture</h2>
       34:             
       35:             <?php if (!empty($imageErrors)): ?>
       36:                 <div class="error-messages">
       37:                     <?php foreach ($imageErrors as $error): ?>
       38:                         <p class="error"><?= htmlspecialchars($error) ?></p>
       39:                     <?php endforeach; ?>
       40:                 </div>
       41:             <?php endif; ?>
       42:             
       43:             <form action="./scripts/profile.php" method="POST" enctype="multipart/form-data" class="image-form">
       44:                 <div class="image-preview">
       45:                     <?php if ($image): ?>
       46:                         <img src="<?= htmlspecialchars($image) ?>" alt="Profile Picture">
       47:                     <?php else: ?>
       48:                         <div class="placeholder">No Image</div>
       49:                     <?php endif; ?>
       50:                 </div>
       51:                 <div class="file-input-container">
       52:                     <input type="file" id="profilePicture" name="profilePicture" accept="image/jpeg,image/png,image/gif">
       53:                     <button type="submit" name="uploadImage">Upload Image</button>
       54:                 </div>
       55:             </form>
       56:         </div>
       57:         
       58:         <div class="profile-form-container">
       59:             <h2>Personal Information</h2>
       60:             
       61:             <?php if (!empty($profileErrors)): ?>
       62:                 <div class="error-messages">
       63:                     <?php foreach ($profileErrors as $error): ?>
       64:                         <p class="error"><?= htmlspecialchars($error) ?></p>
       65:                     <?php endforeach; ?>
       66:                 </div>
       67:             <?php endif; ?>
       68:             
       69:             <form action="./scripts/profile.php" method="POST" class="profile-form">
       70:                 <div class="row">
       71:                     <div class="form-group">
       72:                         <label for="name">Name:</label>
       73:                         <input type="text" id="name" name="name" value="<?= htmlspecialchars($name) ?>">
       74:                     </div>
       75:                     
       76:                     <div class="form-group">
       77:                         <label for="surname">Surname:</label>
       78:                         <input type="text" id="surname" name="surname" value="<?= htmlspecialchars($surname) ?>">
       79:                     </div>
       80:                 </div>
       81:                 
       82:                 <div class="form-group">
       83:                     <label for="dob">Date of Birth:</label>
       84:                     <input type="date" id="dob" name="dob" value="<?= htmlspecialchars($dob) ?>">
       85:                 </div>
       86:                 
       87:                 <div class="form-group">
       88:                     <label for="description">Brief Description (min 50 characters):</label>
       89:                     <textarea id="description" name="description" rows="7"><?= htmlspecialchars($description) ?></textarea>
       90:                 </div>
       91:                 
       92:                 <div class="buttons">
       93:                     <button type="submit" name="updateProfile">Save Profile</button>
       94:                 </div>
       95:             </form>
       96:         </div>
       97:     </div>
       98: </div>
 
     24
     
     
